---
import BaseHead from '../components/BaseHead.astro';
import Header from '../components/Header.astro';
import Footer from '../components/Footer.astro';
import { SITE_TITLE, SITE_DESCRIPTION } from '../consts';
import { getCollection } from 'astro:content';
import { Image } from 'astro:assets';

const posts = (await getCollection('blog'));
---

<!-- todo
 remove webp for blog-placeholder images (avif)? or are both needed -> then add webp for logo-2 -->

<!doctype html>
<html lang="en">
	<head>
		<BaseHead title={SITE_TITLE} description={SITE_DESCRIPTION} />
	</head>
	<body>
		<Header />
		<main>	
			<section>
				<ul>
					{
						posts.map((post) => (
							<li>
								<a href={`/${post.id}/`}>
									<Image width={720} height={360} src={post.data.heroImage} alt={post.data.description} format="avif" loading="eager" />
									<h4 class="title">{post.data.title}</h4>
									<p class="date">
										<time datetime={post.data.pubDate.toISOString()}>{post.data.pubDate.toLocaleString()}</time>
									</p>
								</a>
							</li>
						))
					}
				</ul>
			</section>
			<section>
				<div class="model-container"> <!-- align="center" -->
					<!-- other attributes: poster = webp file  ar  ar-status="not-presenting" auto-rotate -->
					<model-viewer
						id="model_1"
						src="/models/m13D.glb"
						poster="/images/m1frame.webp"
						camera-orbit="1.2195rad 1.362rad 100%"  
						interaction-prompt-threshold="0"
						shadow-intensity="1"
						camera-controls
						alt="3d model one"
					>

 					  <div class="poster" slot="poster" style="background-image: url(/images/m1frame.webp);">
 						<img class="pre-prompt" src="/prompt.svg"/>
					  </div>
					  <div class="progress-bar" slot="progress-bar">
						<div class="update-bar" style="width: 100%;"></div>
					  </div>
					</model-viewer>
				</div>
			</section>
			<script>
			
				const onProgress = (event: Event) => {
				  const progressBar = (event.target as HTMLElement).querySelector('.progress-bar');
				  const updatingBar = (event.target as HTMLElement).querySelector('.update-bar');
				  if (updatingBar) {
					  (updatingBar as HTMLElement).style.width = `${(event as CustomEvent).detail.totalProgress * 100}%`;
				  };
				 //  setTimeout(() => {

				  if ((event as CustomEvent).detail.totalProgress == 1) {
					if (progressBar) {
						progressBar.classList.add('hide');
					}
				  };
				}; // Delay of 1 second before loading the model-viewer

				
			
				const modelElement = document.querySelector('#model_1');
				if (modelElement) {
					modelElement.addEventListener('progress', onProgress);
				}

			  </script>
 			<script> import '@google/model-viewer'</script> 
		</main>
		<Footer />
	</body>
</html>
<style>
			main {
				width: 960px;
			}
			div.model-container {  
				box-sizing: border-box; 
				text-align: -webkit-center; 
			/* 	min-height: 300px;
				min-width: 300px;
				display: flex;
				justify-content: center;
				margin: 6em; */
			}
			model-viewer {
				display: block;
				width: 100vw;
				height: 100vw;
				max-width: 600px;
				max-height: 600px;
			}
			/* This keeps child nodes hidden while the element loads, except the poster */
			:not(:defined) > :not(.poster) {
				display: none;
			}
			:defined > .poster > .pre-prompt {
				display: none;
			}

			/* This CSS should always be used at minimum for any slotted poster */
			.poster {
				display: flex;
				justify-content: center;
				align-items: center; 
				height: 100%;
				top: 0;
				left: 0;
				background-size: contain;
				background-repeat: no-repeat;
				background-position: center;
			}
			@keyframes wiggle {	
				10%, 12% { transform: translateX(-25px); }	 
				30%, 32% { transform: translateX(25px); }	
				0%, 45%, 100% { transform: translateX(0%); }
			}	
			@keyframes fade {	
				5%, 40% { opacity: 1; }	
				0%, 45%, 100% {	opacity: 0; }	 
			}
			.pre-prompt {
				pointer-events: none;
				animation-name: wiggle, fade;
				animation-duration: 5s;
				animation-iteration-count: infinite;
				animation-timing-function: ease-in-out;
			}

			.progress-bar {
				display: block;
				width: 33%;
				height: 10%;
				max-height: 2%;
				position: absolute;
				left: 50%;
				top: 50%;
				transform: translate3d(-50%, -50%, 0);
				border-radius: 25px;
				box-shadow: 0px 3px 10px 3px rgba(0, 0, 0, 0.5), 0px 0px 5px 1px rgba(0, 0, 0, 0.6);
				border: 1px solid rgba(255, 255, 255, 0.9);
				background-color: rgba(0, 0, 0, 0.5);
			}
		
			.progress-bar.hide {
				visibility: hidden;
				transition: visibility 0.3s;
			}
		
			.update-bar {
				background-color: rgba(255, 255, 255, 0.9);
				width: 0%;
				height: 100%;
				border-radius: 25px;
				float: left;
				transition: width 0.3s;
			}
			ul {
				display: flex;
				flex-wrap: wrap;
				gap: 2rem;
				list-style-type: none;
				margin: 0;
				padding: 0;
			}
			ul li {
				width: calc(50% - 1rem);
			}
			ul li * {
				text-decoration: none;
				transition: 0.2s ease;
			}
			ul li:first-child .title {
				font-size: 2.369rem;
			}
			ul li a {
				display: block;
			}
			.title {
				margin: 0;
				color: rgb(var(--black));
				line-height: 1;
			}
			.date {
				margin: 0;
				color: rgb(var(--gray));
			}
			ul li a:hover h4,
			ul li a:hover .date {
				color: rgb(var(--accent));
			}
			ul a:hover {
				box-shadow: var(--box-shadow);
			}
			@media (max-width: 720px) {
				ul {
					gap: 0.5em;
				}
				ul li {
					width: 100%;
					text-align: center;
				}
				ul li:first-child {
					margin-bottom: 0;
				}
				ul li:first-child .title {
					font-size: 1.563em;
				}
			}
		</style>